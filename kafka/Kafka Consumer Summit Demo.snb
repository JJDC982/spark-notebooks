{"metadata":{"name":"Kafka Consumer","user_save_timestamp":"1970-01-01T01:00:00.000Z","auto_save_timestamp":"1970-01-01T01:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":"/home/maasg/.m2/repository","customRepos":null,"customDeps":["org.apache.spark % spark-streaming-kafka_2.10 % 1.4.1"],"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"import org.apache.spark.streaming._\nimport org.apache.spark.streaming.kafka._\nimport org.apache.spark.SparkConf","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"StreamingContext.getActive.foreach(_.stop(true))","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"reset(\"Summit Demo\", lastChanges = (c:SparkConf) => {\n  \n   c.set(\"spark.streaming.blockInterval\", \"200\")\n    .set(\"spark.master\", \"local[4]\")\n  //.set(\"spark.streaming.receiver.maxRate\", \"50000\")\n})","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"val streamingContext = new StreamingContext(sparkContext, Seconds(2))","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"val list = ul(10)\nfor (i<- 1 to 10) {list.append(\"...\")}\nlist","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"val debug = ul(10)\nfor (i<- 1 to 10) {debug.append(\"...\")}\ndebug","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"val zkQuorum=\"172.17.0.6:2181\"\nval group = \"throughput\"\nval numThreads = 2\nval topics= \"datatopic\"\n\nval topicMap = topics.split(\",\").map((_, numThreads.toInt)).toMap\nval stream = KafkaUtils.createStream(streamingContext, zkQuorum, group, topicMap).map(_._2)\nstream.foreachRDD{rdd=>\n                  val count = rdd.count()\n                  debug.append(s\"rdd count: $count\")\n                  rdd.take(5).foreach(\"-\" + debug.append(_))\n                 }\nval parsedStream = stream.map(line => line.split(\",\"))\n                         .flatMap{case Array(typ, ts, value) => \n                                  try{\n                                     val t = ts.trim.toLong\n                                     val v = value.trim.toDouble\n                                     Some(((typ,t),v))\n                                  } catch {\n                                    case e:NumberFormatException => None\n                                  }\n                                 }\nparsedStream.cache\nval temperature = parsedStream.filter(_._1._1 == \"temperature\").map{case ((typ,ts), v) => (ts,v)}\nval humidity = parsedStream.filter(_._1._1 == \"humidity\").map{case ((typ,ts), v) => (ts,v)}\nval reducedt = temperature.transform{rdd => rdd.groupByKey.mapValues(v => v.sum/v.size)}\nval reducedh = humidity.transform{rdd => rdd.groupByKey.mapValues(v => v.sum/v.size)}\nval corr = reducedt.join(reducedh).mapValues{case (t,h) => Math.sqrt(t*t+h*h)}\n\ncorr.foreachRDD{rdd => \n                     val topk = rdd.map(_.swap).top(10).map(_.swap)\n                     topk.foreach(e => list.append(e.toString))\n                     val cnt = rdd.count()\n                     debug.append(s\"corr count: $cnt\")\n                    }","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"val seq:Seq[(String, Double)] = Seq((\"2015-10-25 08:41:24\",10), (\"2015-10-25 08:42:24\",20))\nvar plot = widgets.DiyChart(\n  seq,\n  \"\"\"\n  function(data, headers, chart) {\n    chart.setMargins(50, 50, 5, 70);\n    chart.addLegend(5, 5, 1000, 40, \"left\");\n    var xAxis = chart.addTimeAxis(\"x\", \"_1\", \"%Y-%m-%d %H:%M:%S\", \"%H:%M:%S\");\n    xAxis.title = \"Time\";\n    xAxis.timePeriod = d3.time.seconds;\n    xAxis.timeInterval = 30;\n    var yAxis = chart.addMeasureAxis(\"y\", \"_2\");\n    yAxis.title = \"SpeedSensor\"\n    yAxis.overrideMin = 0;\n    chart.addSeries(null, dimple.plot.line);\n    chart.draw();\n  }\n  \"\"\",\n  sizes=(900, 400)\n)","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"val dateFormat: Long => String = {\n  val formatter = new java.text.SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\")\n  formatter.format(new java.util.Date(l))\n}\nreducedt.foreachRDD{rdd => \n                      val data = rdd.collect()\n                      val formattedData = data.map{case (ts, value) => (dateFormat(ts), value)}\n                      plot.applyOn(formattedData)\n                    }                    ","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"temperature.saveAsTextFiles(\"/tmp/summit\", \"temperature\")\nhumidity.saveAsTextFiles(\"/tmp/summit\", \"humidity\")\ncorr.saveAsTextFiles(\"/tmp/summit\", \"correlation\")","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"streamingContext.start()","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"","outputs":[]}],"nbformat":4}